#!/usr/bin/env python3
"""
üîß –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SEO Article Generator
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—à–∏–±–∫–∏ 500
"""

import sys
import os
import traceback
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

print("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SEO ARTICLE GENERATOR")
print("=" * 60)
print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
print()

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø")
print("-" * 40)

try:
    from backend.config import settings
    
    print(f"OPENAI_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.OPENAI_API_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"ANTHROPIC_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.ANTHROPIC_API_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"SERP_API_KEY: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.SERP_API_KEY else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"DATABASE_URL: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.DATABASE_URL else '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    print(f"FRONTEND_URL: {settings.FRONTEND_URL}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    traceback.print_exc()

print()

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
print("2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
print("-" * 40)

try:
    from backend.database import engine, get_db
    from backend.models import Base
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    with engine.connect() as conn:
        from sqlalchemy import text
        result = conn.execute(text("SELECT 1"))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: –£–°–ü–ï–®–ù–û")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü: –£–°–ü–ï–®–ù–û")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    traceback.print_exc()

print()

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤
print("3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê AI –°–ï–†–í–ò–°–û–í")
print("-" * 40)

try:
    from backend.services.ai_service import AIService
    
    ai_service = AIService()
    print(f"OpenAI —Å–µ—Ä–≤–∏—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if ai_service.openai_service else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    print(f"Anthropic —Å–µ—Ä–≤–∏—Å: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if ai_service.anthropic_service else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    if ai_service.openai_service or ai_service.anthropic_service:
        models = ai_service.get_available_models()
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        for model in models[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"   - {model['name']} ({model['provider']})")
    else:
        print("‚ùå –ù–∏ –æ–¥–∏–Ω AI —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω!")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
    traceback.print_exc()

print()

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ SERP —Å–µ—Ä–≤–∏—Å–∞
print("4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SERP –°–ï–†–í–ò–°–ê")
print("-" * 40)

try:
    from backend.services.serp_service import SERPService
    
    serp_service = SERPService()
    print("‚úÖ SERP —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    test_topic = "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ: '{test_topic}'")
    
    serp_data = serp_service.analyze_topic(test_topic)
    print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
    print(f"   - –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(serp_data.get('keywords', []))}")
    print(f"   - –ó–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(serp_data.get('titles', []))}")
    print(f"   - –í–æ–ø—Ä–æ—Å–æ–≤: {len(serp_data.get('questions', []))}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ SERP —Å–µ—Ä–≤–∏—Å–∞: {e}")
    traceback.print_exc()

print()

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ SEO —Å–µ—Ä–≤–∏—Å–∞
print("5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê SEO –°–ï–†–í–ò–°–ê")
print("-" * 40)

try:
    from backend.services.seo_service import SEOService
    
    seo_service = SEOService()
    print("‚úÖ SEO —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç SEO
    test_text = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –±—É–¥—É—â–µ–≥–æ."
    test_keywords = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"]
    
    seo_score = seo_service.calculate_seo_score(test_text, test_keywords)
    print(f"‚úÖ SEO —Ä–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: –æ—Ü–µ–Ω–∫–∞ = {seo_score}")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ SEO —Å–µ—Ä–≤–∏—Å–∞: {e}")
    traceback.print_exc()

print()

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
print("6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê CRUD –û–ü–ï–†–ê–¶–ò–ô")
print("-" * 40)

try:
    import backend.crud as crud
    from backend.database import get_db
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = next(get_db())
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_article_data = {
        "topic": "–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è",
        "thesis": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∑–∏—Å",
        "style_examples": "",
        "character_count": 1000,
        "keywords": ["—Ç–µ—Å—Ç", "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
        "structure": "# –ó–∞–≥–æ–ª–æ–≤–æ–∫\n## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫",
        "article": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.",
        "seo_score": 75.0,
        "model_used": "gpt-4o-mini"
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—å—é
    article = crud.create_article(db, test_article_data)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏: ID = {article.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏
    articles = crud.get_articles(db, skip=0, limit=1)
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π: –Ω–∞–π–¥–µ–Ω–æ {len(articles)}")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    crud.delete_article(db, article.id)
    print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏: –£–°–ü–ï–®–ù–û")
    
    db.close()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
    traceback.print_exc()

print()

# 7. –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã)
print("7Ô∏è‚É£ –¢–ï–°–¢–û–í–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø")
print("-" * 40)

try:
    if 'ai_service' in locals() and (ai_service.openai_service or ai_service.anthropic_service):
        print("üß™ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...")
        
        test_topic = "Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ" 
        test_thesis = "Python - –ª—É—á—à–∏–π —è–∑—ã–∫ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö"
        test_keywords = ["python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–±—É—á–µ–Ω–∏–µ"]
        test_questions = ["–ß—Ç–æ —Ç–∞–∫–æ–µ Python?", "–ö–∞–∫ –∏–∑—É—á–∏—Ç—å Python?"]
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        model = "gpt-4o-mini" if ai_service.openai_service else "claude-3-5-haiku-20241022"
        
        if ai_service.is_model_available(model):
            structure, usage = ai_service.generate_structure(
                test_topic, test_thesis, test_keywords, test_questions, model
            )
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –£–°–ü–ï–®–ù–û (—Ç–æ–∫–µ–Ω–æ–≤: {usage.get('total_tokens', 0)})")
            print(f"   –î–ª–∏–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {len(structure)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    traceback.print_exc()

print()

# 8. –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
print("8Ô∏è‚É£ –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
print("-" * 40)

print("üìã –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
print("   üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
print("   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞") 
print("   ü§ñ AI —Å–µ—Ä–≤–∏—Å—ã: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
print("   üîç SERP —Å–µ—Ä–≤–∏—Å: –ø—Ä–æ–≤–µ—Ä–µ–Ω")
print("   üìà SEO —Å–µ—Ä–≤–∏—Å: –ø—Ä–æ–≤–µ—Ä–µ–Ω")
print("   üíæ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

print()
print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò:")
print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º:")
print("   cd backend && uvicorn main:app --host 0.0.0.0 --port 8000 --log-level debug")
print()
print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ 500")
print()
print("3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ API –∫–ª—é—á–∞—Ö - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print("   export OPENAI_API_KEY='your-key'")
print("   export ANTHROPIC_API_KEY='your-key'") 
print()
print("4. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
print("   python diagnose_services.py")

print()
print("=" * 60)
print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê") 