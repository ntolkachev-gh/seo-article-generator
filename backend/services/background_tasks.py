import asyncio
import logging
from typing import Dict, Any
from uuid import UUID
from sqlalchemy.orm import Session
from datetime import datetime

from database import get_db
from models import Article, ArticleStatus
import crud
from services.serp_service import SERPService
from services.ai_service import AIService
from services.seo_service import SEOService

logger = logging.getLogger(__name__)

class BackgroundTaskManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π"""
    
    def __init__(self):
        self.serp_service = SERPService()
        self.ai_service = AIService()
        self.seo_service = SEOService()
        self.running_tasks: Dict[str, asyncio.Task] = {}
    
    async def start_article_generation(self, article_id: UUID, generation_params: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏"""
        task_id = str(article_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏
        if task_id in self.running_tasks and not self.running_tasks[task_id].done():
            logger.warning(f"–ó–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        task = asyncio.create_task(self._generate_article_async(article_id, generation_params))
        self.running_tasks[task_id] = task
        
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
        return task
    
    async def _generate_article_async(self, article_id: UUID, params: Dict[str, Any]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏"""
        db = next(get_db())
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "generating"
            await self._update_article_status(db, article_id, ArticleStatus.GENERATING)
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏ {article_id}")
            
            # 1. –ê–Ω–∞–ª–∏–∑ SERP
            logger.info("üîé –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ SERP...")
            serp_data = self.serp_service.analyze_topic(params['topic'])
            keywords = serp_data["keywords"]
            questions = serp_data["questions"]
            logger.info(f"‚úÖ SERP –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}, –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏
            logger.info("üìã –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏...")
            structure, structure_usage = self.ai_service.generate_structure(
                params['topic'], 
                params['thesis'], 
                keywords, 
                questions, 
                params['model']
            )
            logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {structure_usage.get('total_tokens', 0)}")
            
            # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏
            logger.info("üìù –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏...")
            article_text, article_usage = self.ai_service.generate_article(
                params['topic'],
                params['thesis'],
                structure,
                keywords,
                params.get('style_examples', ''),
                params.get('character_count', 5000),
                params['model']
            )
            logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –î–ª–∏–Ω–∞: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # 4. –†–∞—Å—á–µ—Ç SEO-–æ—Ü–µ–Ω–∫–∏
            logger.info("üìà –≠—Ç–∞–ø 4: –†–∞—Å—á–µ—Ç SEO-–æ—Ü–µ–Ω–∫–∏...")
            seo_score = self.seo_service.calculate_seo_score(article_text, keywords)
            logger.info(f"‚úÖ SEO-–æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {seo_score}")
            
            # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üíæ –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            article_data = {
                'keywords': keywords,
                'structure': structure,
                'article': article_text,
                'seo_score': seo_score,
                'status': ArticleStatus.COMPLETED,
                'error_message': None,
                'updated_at': datetime.utcnow()
            }
            
            await self._update_article_data(db, article_id, article_data)
            
            # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            logger.info("üí∞ –≠—Ç–∞–ø 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
            total_usage = {
                "prompt_tokens": structure_usage["prompt_tokens"] + article_usage["prompt_tokens"],
                "completion_tokens": structure_usage["completion_tokens"] + article_usage["completion_tokens"],
                "total_tokens": structure_usage["total_tokens"] + article_usage["total_tokens"]
            }
            
            cost = self.ai_service.calculate_cost(total_usage, params['model'])
            
            usage_data = {
                "article_id": article_id,
                "model": params['model'],
                "prompt_tokens": total_usage["prompt_tokens"],
                "completion_tokens": total_usage["completion_tokens"],
                "total_tokens": total_usage["total_tokens"],
                "cost_usd": cost
            }
            
            crud.create_openai_usage(db, usage_data)
            
            logger.info(f"üéâ –°—Ç–∞—Ç—å—è {article_id} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ {article_id}: {str(e)}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "failed" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            error_data = {
                'status': ArticleStatus.FAILED,
                'error_message': str(e),
                'updated_at': datetime.utcnow()
            }
            await self._update_article_data(db, article_id, error_data)
            
        finally:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            task_id = str(article_id)
            if task_id in self.running_tasks:
                del self.running_tasks[task_id]
            
            db.close()
    
    async def _update_article_status(self, db: Session, article_id: UUID, status: ArticleStatus):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏"""
        article = db.query(Article).filter(Article.id == article_id).first()
        if article:
            article.status = status
            article.updated_at = datetime.utcnow()
            db.commit()
    
    async def _update_article_data(self, db: Session, article_id: UUID, data: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏"""
        article = db.query(Article).filter(Article.id == article_id).first()
        if article:
            for key, value in data.items():
                setattr(article, key, value)
            db.commit()
    
    def get_task_status(self, article_id: UUID) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        task_id = str(article_id)
        if task_id not in self.running_tasks:
            return "not_found"
        
        task = self.running_tasks[task_id]
        if task.done():
            if task.exception():
                return "failed"
            return "completed"
        return "running"
    
    def cancel_task(self, article_id: UUID) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        task_id = str(article_id)
        if task_id in self.running_tasks:
            task = self.running_tasks[task_id]
            if not task.done():
                task.cancel()
                return True
        return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
background_task_manager = BackgroundTaskManager() 