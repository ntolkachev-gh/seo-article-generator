from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List
from uuid import UUID
import asyncio
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

from database import get_db, engine
from models import Base
import crud
import schemas
from services.serp_service import SERPService
from services.ai_service import AIService  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ AIService –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
from services.seo_service import SEOService
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="SEO Article Generator",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Å—Ç–∞—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò",
    version="2.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        settings.FRONTEND_URL,
        "http://localhost:3000",
        "https://localhost:3000",
        "https://seo-article-generator-app-8a9fa9a58cbb.herokuapp.com",
        "https://seo-article-generator.vercel.app",
        "https://seo-article-generator-git-main.vercel.app",
        "https://seo-article-generator-git-main-seo-article-generator.vercel.app",
        "*"  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
serp_service = SERPService()
ai_service = AIService()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ AIService
seo_service = SEOService()

@app.get("/")
async def root():
    return {"message": "SEO Article Generator API"}

@app.options("/api/articles/generate")
async def options_generate_article():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS preflight"""
    return {"message": "OK"}

@app.options("/api/articles")
async def options_articles():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π"""
    return {"message": "OK"}

@app.options("/api/articles/{article_id}")
async def options_article(article_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
    return {"message": "OK"}

@app.options("/api/models")
async def options_models():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    return {"message": "OK"}

@app.get("/api/models", response_model=schemas.ModelsResponse)
async def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö"""
    models = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ AI —Å–µ—Ä–≤–∏—Å–∞
    available_models = ai_service.get_available_models()
    
    for model_info in available_models:
        models.append(schemas.ModelInfo(
            id=model_info["id"],
            name=model_info["name"],
            description=model_info["description"],
            category=model_info["category"],
            pricing=model_info.get("pricing", {"input": 0, "output": 0})
        ))
    
    return schemas.ModelsResponse(models=models)

@app.options("/api/health")
async def options_health():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è health check"""
    return {"message": "OK"}

@app.post("/api/articles/generate", response_model=schemas.GenerationResponse)
async def generate_article(
    request: schemas.GenerationRequest,
    db: Session = Depends(get_db)
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é SEO-—Å—Ç–∞—Ç—å—é"""
    try:
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ç–µ–º—ã: {request.topic}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: –º–æ–¥–µ–ª—å={request.model}, —Ç–µ–∑–∏—Å={request.thesis}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏...")
        if not ai_service.is_model_available(request.model):
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {request.model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            if not ai_service.openai_service and not ai_service.anthropic_service:
                logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω AI —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                raise HTTPException(
                    status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                    detail="–°–µ—Ä–≤–∏—Å AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π (OPENAI_API_KEY –∏–ª–∏ ANTHROPIC_API_KEY)."
                )
            else:
                logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {request.model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"–ú–æ–¥–µ–ª—å {request.model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π."
                )
        
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # 1. –ê–Ω–∞–ª–∏–∑ SERP
        logger.info("üîé –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ SERP...")
        try:
            serp_data = serp_service.analyze_topic(request.topic)
            keywords = serp_data["keywords"]
            questions = serp_data["questions"]
            logger.info(f"‚úÖ SERP –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}, –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ SERP –∞–Ω–∞–ª–∏–∑–µ: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ SERP –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            raise
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏
        logger.info("üìã –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç–∞—Ç—å–∏...")
        try:
            structure, structure_usage = ai_service.generate_structure(
                request.topic, 
                request.thesis, 
                keywords, 
                questions, 
                request.model
            )
            logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {structure_usage.get('total_tokens', 0)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {traceback.format_exc()}")
            raise
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        logger.info("üìù –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç—å–∏...")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: style_examples={bool(request.style_examples)}, character_count={request.character_count or 5000}")
        try:
            article_text, article_usage = ai_service.generate_article(
                request.topic,
                request.thesis,
                structure,
                keywords,
                request.style_examples or "",  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä style_examples
                request.character_count or 5000,  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä character_count
                request.model
            )
            logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –î–ª–∏–Ω–∞: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–∫–µ–Ω–æ–≤: {article_usage.get('total_tokens', 0)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {traceback.format_exc()}")
            raise
        
        # 4. –†–∞—Å—á–µ—Ç SEO-–æ—Ü–µ–Ω–∫–∏
        logger.info("üìà –≠—Ç–∞–ø 4: –†–∞—Å—á–µ—Ç SEO-–æ—Ü–µ–Ω–∫–∏...")
        try:
            seo_score = seo_service.calculate_seo_score(article_text, keywords)
            logger.info(f"‚úÖ SEO-–æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {seo_score}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ SEO: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ SEO: {traceback.format_exc()}")
            raise
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
        logger.info("üíæ –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            article_data = {
                "topic": request.topic,
                "thesis": request.thesis,
                "style_examples": request.style_examples or "",  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                "character_count": request.character_count or 5000,  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                "keywords": keywords,
                "structure": structure,
                "article": article_text,
                "seo_score": seo_score,
                "model_used": request.model
            }
            
            db_article = crud.create_article(db, article_data)
            logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å ID: {db_article.id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –ë–î: {traceback.format_exc()}")
            raise
        
        # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI
        logger.info("üí∞ –≠—Ç–∞–ø 6: –†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
        try:
            total_usage = {
                "prompt_tokens": structure_usage["prompt_tokens"] + article_usage["prompt_tokens"],
                "completion_tokens": structure_usage["completion_tokens"] + article_usage["completion_tokens"],
                "total_tokens": structure_usage["total_tokens"] + article_usage["total_tokens"]
            }
            
            cost = ai_service.calculate_cost(total_usage, request.model)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ai_service
            logger.info(f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${cost:.6f}")
            
            usage_data = {
                "article_id": db_article.id,
                "model": request.model,
                "prompt_tokens": total_usage["prompt_tokens"],
                "completion_tokens": total_usage["completion_tokens"],
                "total_tokens": total_usage["total_tokens"],
                "cost_usd": cost
            }
            
            db_usage = crud.create_openai_usage(db, usage_data)
            logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {traceback.format_exc()}")
            raise
        
        # 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        logger.info("üéâ –≠—Ç–∞–ø 7: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
        try:
            response = schemas.GenerationResponse(
                article_id=str(db_article.id),
                topic=db_article.topic,
                thesis=db_article.thesis,
                style_examples=getattr(db_article, 'style_examples', ''),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                character_count=getattr(db_article, 'character_count', 5000),  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                keywords=db_article.keywords,
                structure=db_article.structure,
                article=db_article.article,
                seo_score=db_article.seo_score,
                model_used=db_article.model_used,
                usage=schemas.OpenAIUsageResponse.from_orm(db_usage)
            )
            logger.info(f"üéä –£–°–ü–ï–•! –°—Ç–∞—Ç—å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. ID: {db_article.id}, –¥–ª–∏–Ω–∞: {len(article_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            return response
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞: {traceback.format_exc()}")
            raise
        
    except ValueError as e:
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        if "API" in str(e) and "key" in str(e).lower():
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"–°–µ—Ä–≤–∏—Å AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}"
            )
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}"
        )

@app.get("/api/articles", response_model=List[schemas.ArticleListResponse])
async def get_articles(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π"""
    articles = crud.get_articles(db, skip=skip, limit=limit)
    return [schemas.ArticleListResponse.from_orm(article) for article in articles]

@app.get("/api/articles/{article_id}", response_model=schemas.ArticleResponse)
async def get_article(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ ID"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return schemas.ArticleResponse.from_orm(article)

@app.delete("/api/articles/{article_id}")
async def delete_article(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é"""
    success = crud.delete_article(db, article_id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return {"message": "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

@app.get("/api/articles/{article_id}/seo-recommendations")
async def get_seo_recommendations(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç SEO-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    recommendations = seo_service.get_seo_recommendations(
        article.article, 
        article.keywords, 
        article.seo_score
    )
    
    return {
        "article_id": str(article_id),
        "seo_score": article.seo_score,
        "recommendations": recommendations
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        openai_available = ai_service.openai_service is not None
        anthropic_available = ai_service.anthropic_service is not None
        
        return {
            "status": "healthy",
            "message": "Service is running",
            "version": "2.0.0",
            "services": {
                "openai": openai_available,
                "anthropic": anthropic_available,
                "serp": True,  # SERP service is always available
                "seo": True    # SEO service is always available
            },
            "available_models": len(ai_service.get_available_models())
        }
    except Exception as e:
        return {
            "status": "error",
            "message": f"Service error: {str(e)}",
            "version": "2.0.0",
            "services": {
                "openai": False,
                "anthropic": False,
                "serp": False,
                "seo": False
            },
            "available_models": 0
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 