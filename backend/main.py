from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List, Optional
from uuid import UUID
import asyncio
import logging
import traceback
import aiohttp
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

from database import get_db, engine
from models import Base, ArticleStatus
import models
import crud
import schemas
from services.serp_service import SERPService
from services.ai_service import AIService  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ AIService –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
from services.seo_service import SEOService
from services.background_tasks import background_task_manager
from config import settings

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# Base.metadata.create_all(bind=engine)

# Webhook configuration
N8N_WEBHOOK_URL = "https://n8n.tech.ai-community.com/webhook/generate-article"

async def send_webhook_to_n8n(article_id: str, article_data: dict = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç webhook –Ω–∞ n8n —Å Article ID –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        payload = {
            "article_id": article_id,
            "timestamp": asyncio.get_event_loop().time(),
            "event": "article_created",
            "status": "pending"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if article_data:
            payload.update({
                "topic": article_data.get("topic"),
                "thesis": article_data.get("thesis", "")[:200] + "..." if len(article_data.get("thesis", "")) > 200 else article_data.get("thesis", ""),  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∑–∏—Å
                "model_used": article_data.get("model_used"),
                "character_count": article_data.get("character_count")
            })
        
        logger.info(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ n8n –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                N8N_WEBHOOK_URL,
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=aiohttp.ClientTimeout(total=10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            ) as response:
                if response.status == 200:
                    logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ n8n –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
                else:
                    logger.warning(f"‚ö†Ô∏è Webhook –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status} –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
                    
    except asyncio.TimeoutError:
        logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook –Ω–∞ n8n –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook –Ω–∞ n8n –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}: {str(e)}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

app = FastAPI(
    title="SEO Article Generator",
    description="API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO-—Å—Ç–∞—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –ò–ò",
    version="0.2.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        settings.FRONTEND_URL,
        "http://localhost:3000",
        "https://localhost:3000",
        "https://seo-article-generator-app-8a9fa9a58cbb.herokuapp.com",
        "https://seo-article-generator.vercel.app",
        "https://seo-article-generator-git-main.vercel.app",
        "https://seo-article-generator-git-main-seo-article-generator.vercel.app",
        "*"  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
serp_service = SERPService()
ai_service = AIService()  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ AIService
seo_service = SEOService()

@app.get("/")
async def root():
    return {"message": "SEO Article Generator API"}

@app.options("/api/articles/generate")
async def options_generate_article():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS preflight"""
    return {"message": "OK"}

@app.options("/api/articles/generate-async")
async def options_generate_article_async():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    return {"message": "OK"}

@app.options("/api/articles/{article_id}/status")
async def options_article_status(article_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞—Ç—å–∏"""
    return {"message": "OK"}

@app.options("/api/articles/{article_id}/complete")
async def options_complete_article(article_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏"""
    return {"message": "OK"}

@app.options("/api/articles")
async def options_articles():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π"""
    return {"message": "OK"}

@app.options("/api/articles/{article_id}")
async def options_article(article_id: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
    return {"message": "OK"}

@app.options("/api/models")
async def options_models():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–µ–π"""
    return {"message": "OK"}

@app.get("/api/models", response_model=schemas.ModelsResponse)
async def get_available_models():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–Ω–∞—Ö"""
    models = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ AI —Å–µ—Ä–≤–∏—Å–∞
    available_models = ai_service.get_available_models()
    
    for model_info in available_models:
        models.append(schemas.ModelInfo(
            id=model_info["id"],
            name=model_info["name"],
            description=model_info["description"],
            category=model_info["category"],
            pricing=model_info.get("pricing", {"input": 0, "output": 0})
        ))
    
    return schemas.ModelsResponse(models=models)

@app.options("/api/health")
async def options_health():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è health check"""
    return {"message": "OK"}

@app.post("/api/articles/generate-async", response_model=schemas.AsyncGenerationResponse)
async def generate_article_async(
    request: schemas.GenerationRequest,
    db: Session = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)"""
    try:
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) –¥–ª—è —Ç–µ–º—ã: {request.topic}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        logger.info("üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        article_data = {
            "topic": request.topic,
            "thesis": request.thesis,
            "style_examples": request.style_examples or "",
            "character_count": request.character_count or 5000,
            "model_used": request.model,
            "status": ArticleStatus.PENDING,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "pending"
            "keywords": None,
            "structure": None,
            "article": None,
            "seo_score": None,
            "error_message": None
        }
        
        db_article = crud.create_article(db, article_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ —Å ID: {db_article.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –Ω–∞ n8n —Å Article ID –∏ –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
        article_id_str = str(db_article.id)
        await send_webhook_to_n8n(article_id_str, article_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ
        return schemas.AsyncGenerationResponse(
            article_id=article_id_str,
            status="pending",
            message="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°—Ç–∞—Ç—å—è –æ–∂–∏–¥–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
            estimated_time=None  # –ù–µ—Ç –æ—Ü–µ–Ω–∫–∏ –≤—Ä–µ–º–µ–Ω–∏, —Ç–∞–∫ –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@app.get("/api/articles/{article_id}/status", response_model=schemas.ArticleStatusResponse)
async def get_article_status(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
    progress_descriptions = {
        ArticleStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        ArticleStatus.GENERATING: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
        ArticleStatus.COMPLETED: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
        ArticleStatus.FAILED: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
    }
    
    return schemas.ArticleStatusResponse(
        article_id=str(article_id),
        status=article.status.value,
        progress=progress_descriptions.get(article.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"),
        error_message=article.error_message,
        created_at=article.created_at.isoformat() if article.created_at else None,
        updated_at=article.updated_at.isoformat() if article.updated_at else None
    )

@app.put("/api/articles/{article_id}/complete", response_model=schemas.ArticleCompletionResponse)
async def complete_article(
    article_id: UUID,
    request: schemas.ArticleCompletionRequest,
    db: Session = Depends(get_db)
):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ç–∞—Ç—å—é –≥–æ—Ç–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'completed'"""
    try:
        logger.info(f"üìù –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ç—å—é {article_id} –≥–æ—Ç–æ–≤—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–∞—Ç—å—è
        article = crud.get_article(db, article_id)
        if not article:
            logger.error(f"‚ùå –°—Ç–∞—Ç—å—è {article_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        content_data = {
            "keywords": request.keywords,
            "structure": request.structure,
            "article": request.article,
            "seo_score": request.seo_score,
            "status": ArticleStatus.COMPLETED,
            "error_message": None,
            "updated_at": asyncio.get_event_loop().time()
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é
        success = crud.update_article_content(db, article_id, content_data)
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é {article_id}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
        if request.usage:
            try:
                usage_data = {
                    "article_id": article_id,
                    "model": request.usage.get("model", article.model_used),
                    "prompt_tokens": request.usage.get("prompt_tokens", 0),
                    "completion_tokens": request.usage.get("completion_tokens", 0),
                    "total_tokens": request.usage.get("total_tokens", 0),
                    "cost_usd": request.usage.get("cost_usd", 0.0)
                }
                crud.create_openai_usage(db, usage_data)
                logger.info(f"üí∞ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏ {article_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏: {str(e)}")
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è {article_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return schemas.ArticleCompletionResponse(
            article_id=str(article_id),
            status="completed",
            message="–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
            updated_at=datetime.utcnow().isoformat()
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ {article_id}: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}"
        )

@app.post("/api/articles/generate", response_model=schemas.GenerationResponse)
async def generate_article(
    request: schemas.GenerationRequest,
    db: Session = Depends(get_db)
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'"""
    try:
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ç–µ–º—ã: {request.topic}")
        logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: –º–æ–¥–µ–ª—å={request.model}, —Ç–µ–∑–∏—Å={request.thesis}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
        logger.info("üíæ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        article_data = {
            "topic": request.topic,
            "thesis": request.thesis,
            "style_examples": request.style_examples or "",
            "character_count": request.character_count or 5000,
            "model_used": request.model,
            "status": ArticleStatus.PENDING,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "pending"
            "keywords": None,
            "structure": None,
            "article": None,
            "seo_score": None,
            "error_message": None
        }
        
        db_article = crud.create_article(db, article_data)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å —Å—Ç–∞—Ç—å–∏ —Å ID: {db_article.id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logger.info("üì§ –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç...")
        try:
            response = schemas.GenerationResponse(
                article_id=str(db_article.id),
                topic=db_article.topic,
                thesis=db_article.thesis,
                style_examples=db_article.style_examples,
                character_count=db_article.character_count,
                keywords=db_article.keywords,
                structure=db_article.structure,
                article=db_article.article,
                seo_score=db_article.seo_score,
                model_used=db_article.model_used,
                status=db_article.status.value,
                error_message=db_article.error_message,
                usage=None  # –ù–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            )
            logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. ID: {db_article.id}")
            return response
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            logger.error(f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞: {traceback.format_exc()}")
            raise
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {traceback.format_exc()}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
        )

@app.get("/api/articles", response_model=List[schemas.ArticleListResponse])
async def get_articles(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π"""
    articles = crud.get_articles(db, skip=skip, limit=limit)
    return [schemas.ArticleListResponse.from_orm(article) for article in articles]

@app.get("/api/articles/{article_id}", response_model=schemas.GenerationResponse)
async def get_article(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—å—é –ø–æ ID"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ArticleResponse –≤ GenerationResponse
    article_response = schemas.ArticleResponse.from_orm(article)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, –µ—Å–ª–∏ —Å—Ç–∞—Ç—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    usage_response = None
    if article.status == ArticleStatus.COMPLETED:
        usage_records = crud.get_article_usage(db, article_id)
        if usage_records:
            usage_response = schemas.OpenAIUsageResponse.from_orm(usage_records[0])
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if not usage_response:
        usage_response = schemas.OpenAIUsageResponse(
            id="",
            article_id=str(article_id),
            model=article_response.model_used or "unknown",
            prompt_tokens=0,
            completion_tokens=0,
            total_tokens=0,
            cost_usd="0.00",
            created_at=article_response.created_at
        )
    
    # –°–æ–∑–¥–∞–µ–º GenerationResponse
    generation_response = schemas.GenerationResponse(
        article_id=article_response.id,
        topic=article_response.topic,
        thesis=article_response.thesis,
        style_examples=article_response.style_examples,
        character_count=article_response.character_count,
        keywords=article_response.keywords,
        structure=article_response.structure,
        article=article_response.article,
        seo_score=article_response.seo_score,
        model_used=article_response.model_used,
        status=article_response.status,  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        error_message=article_response.error_message,  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        usage=usage_response
    )
    
    return generation_response

@app.get("/api/articles/{article_id}/generation-params", response_model=schemas.GenerationParamsResponse)
async def get_article_generation_params(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ ID"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    return schemas.GenerationParamsResponse(
        article_id=str(article_id),
        topic=article.topic,
        thesis=article.thesis,
        style_examples=article.style_examples or "",
        character_count=article.character_count or 5000,
        model_used=article.model_used,
        status=article.status.value,
        created_at=article.created_at.isoformat() if article.created_at else None,
        updated_at=article.updated_at.isoformat() if article.updated_at else None
    )

@app.delete("/api/articles/{article_id}")
async def delete_article(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ç—å—é"""
    # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
    background_task_manager.cancel_task(article_id)
    
    success = crud.delete_article(db, article_id)
    if not success:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    return {"message": "–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

@app.delete("/api/articles/cleanup/pending")
async def cleanup_pending_articles(
    db: Session = Depends(get_db)
):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        deleted_count = crud.delete_articles_by_status(db, models.ArticleStatus.PENDING)
        logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ç–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        return {
            "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ç–µ–π –≤ —Å—Ç–∞—Ç—É—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è",
            "deleted_count": deleted_count
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–µ–π: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ç–µ–π: {str(e)}"
        )

@app.get("/api/articles/{article_id}/seo-recommendations")
async def get_seo_recommendations(
    article_id: UUID,
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∞–µ—Ç SEO-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
    article = crud.get_article(db, article_id)
    if not article:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if article.status != ArticleStatus.COMPLETED:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="SEO-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"
        )
    
    recommendations = seo_service.get_seo_recommendations(
        article.article, 
        article.keywords, 
        article.seo_score
    )
    
    return {
        "article_id": str(article_id),
        "seo_score": article.seo_score,
        "recommendations": recommendations
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
        openai_available = ai_service.openai_service is not None
        anthropic_available = ai_service.anthropic_service is not None
        
        return {
            "status": "healthy",
            "message": "Service is running",
            "version": "0.2.0",
            "services": {
                "openai": openai_available,
                "anthropic": anthropic_available,
                "serp": True,  # SERP service is always available
                "seo": True    # SEO service is always available
            },
            "available_models": len(ai_service.get_available_models())
        }
    except Exception as e:
        return {
            "status": "error",
            "message": f"Service error: {str(e)}",
            "version": "0.2.0",
            "services": {
                "openai": False,
                "anthropic": False,
                "serp": False,
                "seo": False
            },
            "available_models": 0
        }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 